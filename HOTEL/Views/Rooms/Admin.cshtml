@model IEnumerable<HotelWebsite.Models.Room>
@{
    ViewData["Title"] = "Room Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
    
    var vacantCount = ViewBag.VacantCount;
    var occupiedCount = ViewBag.OccupiedCount;
    var maintenanceCount = ViewBag.MaintenanceCount;
    
    var totalRooms = vacantCount + occupiedCount + maintenanceCount;
    var vacantPercentage = totalRooms > 0 ? (vacantCount * 100 / totalRooms) : 0;
    var occupiedPercentage = totalRooms > 0 ? (occupiedCount * 100 / totalRooms) : 0;
    var maintenancePercentage = totalRooms > 0 ? (maintenanceCount * 100 / totalRooms) : 0;
}

@Html.AntiForgeryToken()

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="container py-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Room Management</h3>
        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addRoomModal">
            <i class="fas fa-plus me-2"></i>Add New Room
        </button>
    </div>
    
    <!-- Room Status Overview -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body p-4">
                    <h4 class="card-title mb-4">Room Status Overview</h4>
                    <div class="row text-center mb-3">
                        <div class="col-md-4">
                            <div class="border border-success rounded p-3">
                                <h2 class="text-success mb-1">@vacantCount</h2>
                                <p class="text-muted mb-0">Vacant Rooms</p>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="border border-primary rounded p-3">
                                <h2 class="text-primary mb-1">@occupiedCount</h2>
                                <p class="text-muted mb-0">Occupied Rooms</p>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="border border-warning rounded p-3">
                                <h2 class="text-warning mb-1">@maintenanceCount</h2>
                                <p class="text-muted mb-0">Under Maintenance</p>
                            </div>
                        </div>
                    </div>
                    <div class="progress" style="height: 25px;">
                        <div class="progress-bar bg-success" style="width: @vacantPercentage%;" role="progressbar">@vacantPercentage%</div>
                        <div class="progress-bar bg-primary" style="width: @occupiedPercentage%;" role="progressbar">@occupiedPercentage%</div>
                        <div class="progress-bar bg-warning" style="width: @maintenancePercentage%;" role="progressbar">@maintenancePercentage%</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Room List -->
    <div class="card border-0 shadow-sm">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div class="btn-group">
                    <a href="@Url.Action("Admin")" class="btn @(string.IsNullOrEmpty(Context.Request.Query["status"]) ? "btn-primary" : "btn-outline-primary")">All</a>
                    <a href="@Url.Action("Admin", new { status = "Vacant" })" class="btn @(Context.Request.Query["status"] == "Vacant" ? "btn-primary" : "btn-outline-primary")">Vacant</a>
                    <a href="@Url.Action("Admin", new { status = "Occupied" })" class="btn @(Context.Request.Query["status"] == "Occupied" ? "btn-primary" : "btn-outline-primary")">Occupied</a>
                    <a href="@Url.Action("Admin", new { status = "Under Maintenance" })" class="btn @(Context.Request.Query["status"] == "Under Maintenance" ? "btn-primary" : "btn-outline-primary")">Maintenance</a>
                </div>
                <div class="input-group w-auto">
                    <input type="text" id="searchRoom" class="form-control" placeholder="Search rooms...">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-hover align-middle" id="roomTable">
                    <thead class="table-light">
                        <tr>
                            <th>Room #</th>
                            <th>Type</th>
                            <th>Price</th>
                            <th>Capacity</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var room in Model)
                        {
                            <tr>
                                <td>@room.RoomNumber</td>
                                <td>@room.Type</td>
                                <td>₱@room.Price.ToString("0.00")</td>
                                <td>@room.Capacity</td>
                                <td>
                                    <span class="badge bg-@(room.Status switch {
                                        "Vacant" => "success",
                                        "Occupied" => "primary",
                                        "Under Maintenance" => "warning",
                                        _ => "secondary"
                                    })">@room.Status</span>
                                </td>
                                <td>
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="editRoom(@room.Id)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                                            <i class="fas fa-cog"></i>
                                        </button>
                                        <ul class="dropdown-menu">
                                            <li>
                                                <button class="dropdown-item" onclick="updateRoomStatus(@room.Id, 'Vacant')">
                                                    <i class="fas fa-check-circle text-success me-2"></i>Mark as Vacant
                                                </button>
                                            </li>
                                            <li>
                                                <button class="dropdown-item" onclick="updateRoomStatus(@room.Id, 'Occupied')">
                                                    <i class="fas fa-user-check text-primary me-2"></i>Mark as Occupied
                                                </button>
                                            </li>
                                            <li>
                                                <button class="dropdown-item" onclick="updateRoomStatus(@room.Id, 'Under Maintenance')">
                                                    <i class="fas fa-tools text-warning me-2"></i>Mark for Maintenance
                                                </button>
                                            </li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li>
                                                <button class="dropdown-item text-danger" onclick="deleteRoom(@room.Id)">
                                                    <i class="fas fa-trash me-2"></i>Delete Room
                                                </button>
                                            </li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add Room Modal -->
<div class="modal fade" id="addRoomModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Room</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form asp-action="Create" method="post">
                    <div class="mb-3">
                        <label class="form-label">Room Number</label>
                        <input type="text" name="RoomNumber" class="form-control" required>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Room Type</label>
                        <select name="Type" class="form-select" required>
                            <option value="Standard">Standard</option>
                            <option value="Deluxe">Deluxe</option>
                            <option value="Suite">Suite</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Price per Night</label>
                        <div class="input-group">
                            <span class="input-group-text">₱</span>
                            <input type="number" name="Price" class="form-control" step="0.01" required>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Capacity</label>
                        <input type="number" name="Capacity" class="form-control" required>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea name="Description" class="form-control" rows="3" required></textarea>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Image URL</label>
                        <input type="url" name="ImageUrl" class="form-control" required>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Status</label>
                        <select name="Status" class="form-select" required>
                            <option value="Vacant">Vacant</option>
                            <option value="Occupied">Occupied</option>
                            <option value="Under Maintenance">Under Maintenance</option>
                        </select>
                    </div>

                    <div class="text-end">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-success">Add Room</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Room status update function
        function updateRoomStatus(roomId, status) {
            if (confirm('Are you sure you want to mark this room as ' + status + '?')) {
                // Get the antiforgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                fetch('/Rooms/UpdateStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ id: roomId, status: status })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Show success message
                        const alert = document.createElement('div');
                        alert.className = 'alert alert-success alert-dismissible fade show';
                        alert.innerHTML = `
                            ${data.message}
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        `;
                        document.querySelector('.container').insertBefore(alert, document.querySelector('.container').firstChild);
                        
                        // Reload the page after a short delay
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    } else {
                        throw new Error(data.message);
                    }
                })
                .catch(error => {
                    // Show error message
                    const alert = document.createElement('div');
                    alert.className = 'alert alert-danger alert-dismissible fade show';
                    alert.innerHTML = `
                        Error updating room status: ${error.message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    `;
                    document.querySelector('.container').insertBefore(alert, document.querySelector('.container').firstChild);
                });
            }
        }

        // Search functionality
        const searchRoom = document.getElementById('searchRoom');
        const roomTable = document.getElementById('roomTable');

        searchRoom.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const rows = roomTable.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

            Array.from(rows).forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        });

        // Edit room function
        function editRoom(roomId) {
            // Get room details and populate edit modal
            fetch(`/Rooms/GetRoomDetails/${roomId}`)
                .then(response => response.json())
                .then(room => {
                    // Populate edit modal fields
                    document.getElementById('editRoomNumber').value = room.roomNumber;
                    document.getElementById('editType').value = room.type;
                    document.getElementById('editPrice').value = room.price;
                    document.getElementById('editCapacity').value = room.capacity;
                    document.getElementById('editStatus').value = room.status;
                    document.getElementById('editRoomId').value = room.id;
                    
                    // Show edit modal
                    new bootstrap.Modal(document.getElementById('editRoomModal')).show();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error loading room details');
                });
        }

        // Delete room function
        function deleteRoom(roomId) {
            if (confirm('Are you sure you want to delete this room? This action cannot be undone.')) {
                fetch('/Rooms/Delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ id: roomId })
                })
                .then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else {
                        alert('Error deleting room');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error deleting room');
                });
            }
        }
    </script>
}