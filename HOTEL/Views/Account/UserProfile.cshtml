@model HotelWebsite.Models.User
@{
    ViewData["Title"] = "User Profile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-sm" style="border-radius: var(--border-radius-lg); box-shadow: var(--shadow-md);">
                <div class="card-body p-4 p-md-5">
                    <h2 class="card-title text-center mb-4" style="color: var(--primary-dark);">Your Profile</h2>

                    <form asp-action="UpdateProfile" method="post" id="profileForm" enctype="multipart/form-data" novalidate>
                        <!-- Photo upload with preview -->
                        <div class="text-center mb-4">
                            <div class="profile-photo-container mx-auto mb-3">
                                @if (!string.IsNullOrEmpty(Model.Photo))
                                {
                                    <img id="photoPreview" src="@Model.Photo" alt="Profile Photo" class="img-thumbnail rounded-circle profile-photo" />
                                }
                                else
                                {
                                    <img id="photoPreview" src="/images/default-profile.jpg" alt="Profile Photo" class="img-thumbnail rounded-circle profile-photo" />
                                }
                            </div>
                            <label for="photoUpload" class="btn btn-outline-secondary btn-sm">
                                <i class="bi bi-camera me-1"></i> Change Photo
                            </label>
                            <input id="photoUpload" type="file" class="d-none" accept="image/*" onchange="previewImage(this)" />
                            <input asp-for="Photo" type="hidden" id="photoField" />
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="FirstName" class="form-label" style="color: var(--secondary-dark); font-weight: 500;">First Name</label>
                                <input asp-for="FirstName" class="form-control" required style="border: 2px solid var(--light-gray); border-radius: var(--border-radius-md); transition: var(--transition-normal);" />
                                <span asp-validation-for="FirstName" class="text-danger small"></span>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label asp-for="LastName" class="form-label" style="color: var(--secondary-dark); font-weight: 500;">Last Name</label>
                                <input asp-for="LastName" class="form-control" required style="border: 2px solid var(--light-gray); border-radius: var(--border-radius-md); transition: var(--transition-normal);" />
                                <span asp-validation-for="LastName" class="text-danger small"></span>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="MiddleName" class="form-label" style="color: var(--secondary-dark); font-weight: 500;">Middle Name <span class="text-muted">(optional)</span></label>
                            <input asp-for="MiddleName" class="form-control" style="border: 2px solid var(--light-gray); border-radius: var(--border-radius-md); transition: var(--transition-normal);" />
                            <span asp-validation-for="MiddleName" class="text-danger small"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Email" class="form-label" style="color: var(--secondary-dark); font-weight: 500;">Email Address</label>
                            <input asp-for="Email" type="email" class="form-control" required style="border: 2px solid var(--light-gray); border-radius: var(--border-radius-md); transition: var(--transition-normal);" />
                            <span asp-validation-for="Email" class="text-danger small"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Address" class="form-label" style="color: var(--secondary-dark); font-weight: 500;">Address</label>
                            <input asp-for="Address" class="form-control" required style="border: 2px solid var(--light-gray); border-radius: var(--border-radius-md); transition: var(--transition-normal);" />
                            <span asp-validation-for="Address" class="text-danger small"></span>
                        </div>

                        <div class="d-flex justify-content-between mb-4 mt-4">
                            <a href="#" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#changePasswordModal">
                                <i class="bi bi-key me-1"></i> Change Password
                            </a>
                            <button type="submit" class="btn btn-primary" id="saveChangesBtn">
                                <i class="bi bi-check-circle me-1"></i> Save Changes
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Change Password Modal -->
<div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="changePasswordModalLabel">Change Password</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form asp-action="ChangePassword" method="post" id="changePasswordForm" novalidate>
                    <div class="mb-3">
                        <label for="CurrentPassword" class="form-label" style="color: var(--secondary-dark); font-weight: 500;">Current Password</label>
                        <div class="input-group">
                            <input type="password" id="CurrentPassword" name="CurrentPassword" class="form-control" required style="border: 2px solid var(--light-gray); border-radius: var(--border-radius-md) 0 0 var(--border-radius-md); transition: var(--transition-normal);" />
                            <button class="btn btn-outline-secondary toggle-password" type="button" data-target="CurrentPassword" style="border: 2px solid var(--light-gray); border-left: none; border-radius: 0 var(--border-radius-md) var(--border-radius-md) 0;">
                                <i class="bi bi-eye"></i>
                            </button>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="NewPassword" class="form-label" style="color: var(--secondary-dark); font-weight: 500;">New Password</label>
                        <div class="input-group">
                            <input type="password" id="NewPassword" name="NewPassword" class="form-control" required minlength="8" style="border: 2px solid var(--light-gray); border-radius: var(--border-radius-md) 0 0 var(--border-radius-md); transition: var(--transition-normal);" />
                            <button class="btn btn-outline-secondary toggle-password" type="button" data-target="NewPassword" style="border: 2px solid var(--light-gray); border-left: none; border-radius: 0 var(--border-radius-md) var(--border-radius-md) 0;">
                                <i class="bi bi-eye"></i>
                            </button>
                        </div>

                        <!-- Password strength meter -->
                        <div class="mt-2 mb-1">
                            <div class="progress" style="height: 6px; border-radius: var(--border-radius-full);">
                                <div id="passwordStrengthBar" class="progress-bar" role="progressbar" style="width: 0%; border-radius: var(--border-radius-full);" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                        </div>
                        <div id="passwordStrengthText" class="form-text small" style="color: var(--secondary);">Password strength: Too weak</div>

                        <div class="form-text mt-2" id="passwordRequirements" style="color: var(--secondary);">
                            Your password must:
                            <ul class="mb-0 ps-3 mt-1">
                                <li id="req-length"><span class="text-danger">✗</span> Be at least 8 characters long</li>
                                <li id="req-uppercase"><span class="text-danger">✗</span> Include at least one uppercase letter</li>
                                <li id="req-lowercase"><span class="text-danger">✗</span> Include at least one lowercase letter</li>
                                <li id="req-number"><span class="text-danger">✗</span> Include at least one number</li>
                                <li id="req-special"><span class="text-danger">✗</span> Include at least one special character</li>
                            </ul>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="ConfirmNewPassword" class="form-label" style="color: var(--secondary-dark); font-weight: 500;">Confirm New Password</label>
                        <div class="input-group">
                            <input type="password" id="ConfirmNewPassword" name="ConfirmNewPassword" class="form-control" required style="border: 2px solid var(--light-gray); border-radius: var(--border-radius-md) 0 0 var(--border-radius-md); transition: var(--transition-normal);" />
                            <button class="btn btn-outline-secondary toggle-password" type="button" data-target="ConfirmNewPassword" style="border: 2px solid var(--light-gray); border-left: none; border-radius: 0 var(--border-radius-md) var(--border-radius-md) 0;">
                                <i class="bi bi-eye"></i>
                            </button>
                        </div>
                        <span id="confirmPasswordError" class="text-danger small"></span>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="savePasswordBtn">Save New Password</button>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">

<style>
    .profile-photo-container {
        width: 150px;
        height: 150px;
        overflow: hidden;
    }

    .profile-photo {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    /* Bootstrap validation feedback styles */
    .form-control.is-invalid {
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Get form elements
        const profileForm = document.getElementById('profileForm');
        const saveChangesBtn = document.getElementById('saveChangesBtn');

        // Real-time validation for profile form
        if (profileForm) {
            const requiredInputs = profileForm.querySelectorAll('input[required]');

            // Validate required fields on blur
            requiredInputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (!this.value.trim()) {
                        this.classList.add('is-invalid');
                    } else {
                        this.classList.remove('is-invalid');
                    }
                });

                // Clear validation error when user starts typing
                input.addEventListener('input', function() {
                    if (this.classList.contains('is-invalid') && this.value.trim()) {
                        this.classList.remove('is-invalid');
                    }
                });
            });

            // Form submission validation
            profileForm.addEventListener('submit', function(event) {
                let isValid = true;

                // Check all required fields
                requiredInputs.forEach(input => {
                    if (!input.value.trim()) {
                        input.classList.add('is-invalid');
                        isValid = false;
                    } else {
                        input.classList.remove('is-invalid');
                    }
                });

                if (!isValid) {
                    event.preventDefault();
                }
            });
        }

        // Toggle password visibility for all password fields
        document.querySelectorAll('.toggle-password').forEach(button => {
            button.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const passwordInput = document.getElementById(targetId);
                const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                passwordInput.setAttribute('type', type);
                this.querySelector('i').classList.toggle('bi-eye');
                this.querySelector('i').classList.toggle('bi-eye-slash');
            });
        });

        // Password strength checker
        const newPassword = document.getElementById('NewPassword');
        const confirmNewPassword = document.getElementById('ConfirmNewPassword');
        const passwordStrengthBar = document.getElementById('passwordStrengthBar');
        const passwordStrengthText = document.getElementById('passwordStrengthText');
        const errorElement = document.getElementById('confirmPasswordError');

        // Password requirements elements
        const reqLength = document.getElementById('req-length');
        const reqUppercase = document.getElementById('req-uppercase');
        const reqLowercase = document.getElementById('req-lowercase');
        const reqNumber = document.getElementById('req-number');
        const reqSpecial = document.getElementById('req-special');

        function checkPasswordStrength(password) {
            let strength = 0;

            // Check length
            if (password.length >= 8) {
                strength += 20;
                reqLength.innerHTML = '<span class="text-success">✓</span> Be at least 8 characters long';
            } else {
                reqLength.innerHTML = '<span class="text-danger">✗</span> Be at least 8 characters long';
            }

            // Check for uppercase letters
            if (/[A-Z]/.test(password)) {
                strength += 20;
                reqUppercase.innerHTML = '<span class="text-success">✓</span> Include at least one uppercase letter';
            } else {
                reqUppercase.innerHTML = '<span class="text-danger">✗</span> Include at least one uppercase letter';
            }

            // Check for lowercase letters
            if (/[a-z]/.test(password)) {
                strength += 20;
                reqLowercase.innerHTML = '<span class="text-success">✓</span> Include at least one lowercase letter';
            } else {
                reqLowercase.innerHTML = '<span class="text-danger">✗</span> Include at least one lowercase letter';
            }

            // Check for numbers
            if (/[0-9]/.test(password)) {
                strength += 20;
                reqNumber.innerHTML = '<span class="text-success">✓</span> Include at least one number';
            } else {
                reqNumber.innerHTML = '<span class="text-danger">✗</span> Include at least one number';
            }

            // Check for special characters
            if (/[^A-Za-z0-9]/.test(password)) {
                strength += 20;
                reqSpecial.innerHTML = '<span class="text-success">✓</span> Include at least one special character';
            } else {
                reqSpecial.innerHTML = '<span class="text-danger">✗</span> Include at least one special character';
            }

            // Update strength meter
            passwordStrengthBar.style.width = strength + '%';
            passwordStrengthBar.setAttribute('aria-valuenow', strength);

            // Set color based on strength
            if (strength < 40) {
                passwordStrengthBar.className = 'progress-bar bg-danger';
                passwordStrengthText.innerHTML = 'Password strength: Too weak';
                return false;
            } else if (strength < 70) {
                passwordStrengthBar.className = 'progress-bar bg-warning';
                passwordStrengthText.innerHTML = 'Password strength: Medium';
                return true;
            } else {
                passwordStrengthBar.className = 'progress-bar bg-success';
                passwordStrengthText.innerHTML = 'Password strength: Strong';
                return true;
            }
        }

        // Check password strength on input
        if (newPassword) {
            newPassword.addEventListener('input', function() {
                checkPasswordStrength(this.value);

                // Check if passwords match
                if (confirmNewPassword.value && this.value !== confirmNewPassword.value) {
                    errorElement.textContent = "Passwords do not match.";
                    confirmNewPassword.classList.add('is-invalid');
                } else if (confirmNewPassword.value) {
                    errorElement.textContent = "";
                    confirmNewPassword.classList.remove('is-invalid');
                }
            });
        }

        // Real-time password matching
        if (confirmNewPassword) {
            confirmNewPassword.addEventListener('input', function() {
                if (this.value && this.value !== newPassword.value) {
                    errorElement.textContent = "Passwords do not match.";
                    this.classList.add('is-invalid');
                } else {
                    errorElement.textContent = "";
                    this.classList.remove('is-invalid');
                }
            });
        }

        // Validate change password form fields on blur
        const passwordFormInputs = document.querySelectorAll('#changePasswordForm input[required]');
        if (passwordFormInputs) {
            passwordFormInputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (!this.value) {
                        this.classList.add('is-invalid');
                    } else {
                        this.classList.remove('is-invalid');
                    }
                });

                input.addEventListener('input', function() {
                    if (this.classList.contains('is-invalid') && this.value) {
                        this.classList.remove('is-invalid');
                    }
                });
            });
        }

        // Submit change password form
        const savePasswordBtn = document.getElementById('savePasswordBtn');
        if (savePasswordBtn) {
            savePasswordBtn.addEventListener('click', function() {
                const form = document.getElementById('changePasswordForm');
                let isValid = true;

                // Validate current password
                const currentPassword = document.getElementById('CurrentPassword');
                if (!currentPassword.value) {
                    currentPassword.classList.add('is-invalid');
                    isValid = false;
                } else {
                    currentPassword.classList.remove('is-invalid');
                }

                // Validate new password
                if (newPassword.value) {
                    if (!checkPasswordStrength(newPassword.value)) {
                        newPassword.classList.add('is-invalid');
                        isValid = false;
                    } else {
                        newPassword.classList.remove('is-invalid');
                    }
                } else {
                    newPassword.classList.add('is-invalid');
                    isValid = false;
                }

                // Check passwords match
                if (newPassword.value !== confirmNewPassword.value) {
                    errorElement.textContent = "Passwords do not match.";
                    confirmNewPassword.classList.add('is-invalid');
                    isValid = false;
                } else {
                    errorElement.textContent = "";
                    confirmNewPassword.classList.remove('is-invalid');
                }

                if (isValid) {
                    form.submit();
                }
            });
        }
    });

    // Image preview function
    function previewImage(input) {
        if (input.files && input.files[0]) {
            const reader = new FileReader();

            reader.onload = function(e) {
                document.getElementById('photoPreview').src = e.target.result;
                document.getElementById('photoField').value = e.target.result;
            }

            reader.readAsDataURL(input.files[0]);
        }
    }
</script>