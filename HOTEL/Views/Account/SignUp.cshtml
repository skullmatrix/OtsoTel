@model HotelWebsite.Models.User
@{
    ViewData["Title"] = "Sign Up";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section class="signup-section py-5 bg-light">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <div class="card border-0 shadow-lg rounded-lg overflow-hidden">
                    <div class="row g-0">
                        <!-- Left side image -->
                        <div class="col-md-5 d-none d-md-block">
                            <img src="https://i.pinimg.com/736x/2a/11/2f/2a112f695462f797da807fa7a03b6f39.jpg"
                                 class="img-fluid h-100 object-fit-cover" alt="The Matrix Hotel">
                            <div class="position-absolute bottom-0 start-0 p-4 text-white">
                                <h3 class="fw-bold">THE MATRIX</h3>
                                <p class="mb-0">Where reality meets luxury</p>
                            </div>
                        </div>

                        <!-- Right side form -->
                        <div class="col-md-7">
                            <div class="card-body p-4 p-lg-5">
                                <div class="text-center mb-4">
                                    <h2 class="fw-bold mb-1" style="color: var(--primary-dark);">Create Your Account</h2>
                                    <p class="text-muted">Join us to experience luxury beyond reality</p>
                                </div>

                                <!-- Error message container -->
                                <div id="signupErrorMessage" class="alert alert-danger d-none mb-4" role="alert"></div>

                                <form asp-action="SignUp" method="post" id="signupForm" novalidate>
                                    <!-- Add a hidden field for redirect -->
                                    <input type="hidden" name="redirectToLogin" value="true" />

                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label asp-for="FirstName" class="form-label">First Name</label>
                                            <div class="input-group">
                                                <span class="input-group-text bg-light"><i class="fas fa-user text-muted"></i></span>
                                                <input asp-for="FirstName" class="form-control" required placeholder="First name" />
                                            </div>
                                            <span asp-validation-for="FirstName" class="text-danger small"></span>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label asp-for="LastName" class="form-label">Last Name</label>
                                            <div class="input-group">
                                                <span class="input-group-text bg-light"><i class="fas fa-user text-muted"></i></span>
                                                <input asp-for="LastName" class="form-control" required placeholder="Last name" />
                                            </div>
                                            <span asp-validation-for="LastName" class="text-danger small"></span>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label asp-for="Email" class="form-label">Email Address</label>
                                            <div class="input-group">
                                                <span class="input-group-text bg-light"><i class="fas fa-envelope text-muted"></i></span>
                                                <input asp-for="Email" type="email" class="form-control" required placeholder="your@email.com" />
                                            </div>
                                            <span asp-validation-for="Email" class="text-danger small"></span>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label asp-for="Address" class="form-label">Address</label>
                                            <div class="input-group">
                                                <span class="input-group-text bg-light"><i class="fas fa-map-marker-alt text-muted"></i></span>
                                                <input asp-for="Address" class="form-control" required placeholder="Your address" />
                                            </div>
                                            <span asp-validation-for="Address" class="text-danger small"></span>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="Password" class="form-label">Password</label>
                                            <div class="input-group">
                                                <span class="input-group-text bg-light"><i class="fas fa-lock text-muted"></i></span>
                                                <input type="password" id="Password" name="Password" class="form-control" required minlength="8" placeholder="Create a password" />
                                                <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                            </div>
                                            <span asp-validation-for="Password" class="text-danger small"></span>

                                            <!-- Password strength indicator -->
                                            <div class="mt-2 mb-1">
                                                <div class="progress" style="height: 5px; border-radius: 5px;">
                                                    <div id="passwordStrengthBar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                                                </div>
                                            </div>
                                            <div id="passwordStrengthText" class="form-text small text-muted">Password strength</div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="ConfirmPassword" class="form-label">Confirm Password</label>
                                            <div class="input-group">
                                                <span class="input-group-text bg-light"><i class="fas fa-lock text-muted"></i></span>
                                                <input type="password" id="ConfirmPassword" class="form-control" required placeholder="Confirm password" />
                                                <button class="btn btn-outline-secondary" type="button" id="toggleConfirmPassword">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                            </div>
                                            <span id="confirmPasswordError" class="text-danger small"></span>
                                        </div>
                                    </div>

                                    <!-- Password requirements simplified -->
                                    <div class="mb-4">
                                        <div id="passwordRequirements" class="form-text small">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <span id="req-length"><i class="fas fa-times-circle text-danger"></i> 8+ characters</span>
                                                </div>
                                                <div class="col-md-6">
                                                    <span id="req-uppercase"><i class="fas fa-times-circle text-danger"></i> Uppercase</span>
                                                </div>
                                                <div class="col-md-6">
                                                    <span id="req-lowercase"><i class="fas fa-times-circle text-danger"></i> Lowercase</span>
                                                </div>
                                                <div class="col-md-6">
                                                    <span id="req-number"><i class="fas fa-times-circle text-danger"></i> Number</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="d-grid mb-4">
                                        <button type="submit" class="btn btn-primary btn-lg" id="submitBtn">Create Account</button>
                                    </div>

                                    <div class="text-center">
                                        <p class="mb-0 text-muted">Already have an account? <a href="/?showLogin=true" id="signInLink" class="text-primary fw-medium">Sign In</a></p>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Password visibility toggle
        const togglePassword = document.getElementById('togglePassword');
        const password = document.getElementById('Password');

        togglePassword.addEventListener('click', function() {
            const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
            password.setAttribute('type', type);
            this.querySelector('i').classList.toggle('fa-eye');
            this.querySelector('i').classList.toggle('fa-eye-slash');
        });

        // Confirm Password visibility toggle
        const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');
        const confirmPassword = document.getElementById('ConfirmPassword');

        toggleConfirmPassword.addEventListener('click', function() {
            const type = confirmPassword.getAttribute('type') === 'password' ? 'text' : 'password';
            confirmPassword.setAttribute('type', type);
            this.querySelector('i').classList.toggle('fa-eye');
            this.querySelector('i').classList.toggle('fa-eye-slash');
        });

        // Form validation
        const form = document.getElementById('signupForm');
        const errorElement = document.getElementById('confirmPasswordError');
        const errorMessageContainer = document.getElementById('signupErrorMessage');
        const passwordStrengthBar = document.getElementById('passwordStrengthBar');
        const passwordStrengthText = document.getElementById('passwordStrengthText');

        // Password requirements elements
        const reqLength = document.getElementById('req-length');
        const reqUppercase = document.getElementById('req-uppercase');
        const reqLowercase = document.getElementById('req-lowercase');
        const reqNumber = document.getElementById('req-number');

        // Password strength checker
        function checkPasswordStrength(password) {
            let strength = 0;

            // Check length
            if (password.length >= 8) {
                strength += 25;
                reqLength.innerHTML = '<i class="fas fa-check-circle text-success"></i> 8+ characters';
            } else {
                reqLength.innerHTML = '<i class="fas fa-times-circle text-danger"></i> 8+ characters';
            }

            // Check for uppercase letters
            if (/[A-Z]/.test(password)) {
                strength += 25;
                reqUppercase.innerHTML = '<i class="fas fa-check-circle text-success"></i> Uppercase';
            } else {
                reqUppercase.innerHTML = '<i class="fas fa-times-circle text-danger"></i> Uppercase';
            }

            // Check for lowercase letters
            if (/[a-z]/.test(password)) {
                strength += 25;
                reqLowercase.innerHTML = '<i class="fas fa-check-circle text-success"></i> Lowercase';
            } else {
                reqLowercase.innerHTML = '<i class="fas fa-times-circle text-danger"></i> Lowercase';
            }

            // Check for numbers
            if (/[0-9]/.test(password)) {
                strength += 25;
                reqNumber.innerHTML = '<i class="fas fa-check-circle text-success"></i> Number';
            } else {
                reqNumber.innerHTML = '<i class="fas fa-times-circle text-danger"></i> Number';
            }

            // Update strength meter
            passwordStrengthBar.style.width = strength + '%';
            passwordStrengthBar.setAttribute('aria-valuenow', strength);

            // Set color based on strength
            if (strength < 50) {
                passwordStrengthBar.className = 'progress-bar bg-danger';
                passwordStrengthText.innerHTML = 'Password strength: Weak';
                return false;
            } else if (strength < 100) {
                passwordStrengthBar.className = 'progress-bar bg-warning';
                passwordStrengthText.innerHTML = 'Password strength: Medium';
                return true;
            } else {
                passwordStrengthBar.className = 'progress-bar bg-success';
                passwordStrengthText.innerHTML = 'Password strength: Strong';
                return true;
            }
        }

        // Check password strength on input
        password.addEventListener('input', function() {
            checkPasswordStrength(this.value);

            // Check if passwords match
            if (confirmPassword.value && this.value !== confirmPassword.value) {
                errorElement.textContent = "Passwords do not match";
                confirmPassword.classList.add('is-invalid');
            } else if (confirmPassword.value) {
                errorElement.textContent = "";
                confirmPassword.classList.remove('is-invalid');
            }
        });

        // Form submit handler
        form.addEventListener('submit', function(event) {
            // Reset error message container
            errorMessageContainer.classList.add('d-none');
            errorMessageContainer.textContent = '';

            let hasErrors = false;
            let errorMessages = [];

            // Prevent submission if password is not strong enough
            if (!checkPasswordStrength(password.value)) {
                event.preventDefault();
                password.classList.add('is-invalid');
                errorMessages.push("Password does not meet requirements");
                hasErrors = true;
            }

            // Check if passwords match
            if (password.value !== confirmPassword.value) {
                event.preventDefault();
                errorElement.textContent = "Passwords do not match";
                confirmPassword.classList.add('is-invalid');
                errorMessages.push("Passwords do not match");
                hasErrors = true;
            } else {
                errorElement.textContent = "";
                confirmPassword.classList.remove('is-invalid');
            }

            // Check required fields
            const inputs = form.querySelectorAll('input[required]');
            inputs.forEach(input => {
                if (!input.value) {
                    input.classList.add('is-invalid');
                    event.preventDefault();
                    const label = input.previousElementSibling ? input.previousElementSibling.textContent : 'Field';
                    errorMessages.push(`${label} is required`);
                    hasErrors = true;
                } else {
                    input.classList.remove('is-invalid');
                }
            });

            // Display error messages if any
            if (hasErrors) {
                errorMessageContainer.classList.remove('d-none');
                errorMessageContainer.innerHTML = errorMessages.map(msg => `<div>${msg}</div>`).join('');
                return false;
            }

            // Let form submit normally with the redirect parameter
            // The server-side code will handle the redirect
        });

        // Real-time validation feedback
        const inputs = form.querySelectorAll('input');
        inputs.forEach(input => {
            input.addEventListener('blur', function() {
                if (this.hasAttribute('required') && !this.value) {
                    this.classList.add('is-invalid');
                } else {
                    this.classList.remove('is-invalid');
                }
            });

            input.addEventListener('input', function() {
                if (this.classList.contains('is-invalid') && this.value) {
                    this.classList.remove('is-invalid');
                }
            });
        });

        // Real-time password matching
        confirmPassword.addEventListener('input', function() {
            if (this.value && this.value !== password.value) {
                errorElement.textContent = "Passwords do not match";
                this.classList.add('is-invalid');
            } else {
                errorElement.textContent = "";
                this.classList.remove('is-invalid');
            }
        });

        // Ensure Sign In link redirects to index with login modal
        document.getElementById('signInLink').addEventListener('click', function(e) {
            // No need to prevent default - the href is correct
        });
    });
</script>